AWSTemplateFormatVersion: 2010-09-09
Description: Provides Session Manager access without an Internet Gateway to an instance in a private subnet.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Configuration
        Parameters:
          - LatestAmiId
          - Cidr
          - InstanceType
    ParameterLabels:
      LatestAmiId:
        default: Systems Manager Parameter for AMI
      Cidr:
        default: CIDR block for VPC and subnet
      InstanceType:
        default: EC2 Instance Type
Parameters:
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  Cidr:
    Type: String
    Default: 192.168.0.0/16
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
  InstanceType:
    Type: String
    Default: t2.micro
    Description: Select a valid instance type for your Region
    AllowedValues:
    - t2.micro
    - t3.micro
    - m4.large
    - m5.large
Resources:
  # Vpc:
  #   Type: AWS::EC2::VPC
  #   Properties:
  #     CidrBlock: !Ref pCidr
  #     EnableDnsHostnames: True
  #     EnableDnsSupport: True
  # Three VPC endpoints are required for Session Manager without an internet gateway:
  # 1. ssm
  # 2. ssmmessages
  # 3. ec2messages
  # This solution will not work without in Regions that do not include all three 
  # of these VPC endpoints
  SsmVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !ImportValue afg-network-stack-VPCID
      SubnetIds:
        - !ImportValue afg-network-stack-PriSubnetID
        - !ImportValue afg-network-stack-SecondPriSubnetID
      SecurityGroupIds:
        - !ImportValue afg-network-stack-SecurityGroupWeb
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
  SsmMessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !ImportValue afg-network-stack-VPCID
      SubnetIds:
        - !ImportValue afg-network-stack-PriSubnetID
        - !ImportValue afg-network-stack-SecondPriSubnetID
      SecurityGroupIds:
        - !ImportValue afg-network-stack-SecurityGroupWeb
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
  Ec2MessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !ImportValue afg-network-stack-VPCID
      SubnetIds:
        - !ImportValue afg-network-stack-PriSubnetID
        - !ImportValue afg-network-stack-SecondPriSubnetID
      SecurityGroupIds:
        - !ImportValue afg-network-stack-SecurityGroupWeb
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
  Ec2InstanceProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: 
        - !Ref Ec2InstanceRole
  Ec2InstanceRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      SubnetId: !ImportValue afg-network-stack-PriSubnetID
      IamInstanceProfile: !Ref Ec2InstanceProfile 
      SecurityGroupIds:
        - !ImportValue afg-network-stack-SecurityGroupWeb
  # PrivateSubnet:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     CidrBlock: !Ref pCidr
  #     MapPublicIpOnLaunch: false
  #     VpcId: !Ref rVpc
  # rPrivateRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref rVpc
  # rSecurityGroupEc2Instance:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: SG for EC2 Instance
  #     VpcId: !Ref rVpc
  #     # Despite this security group containing no ingress rules, Session 
  #     # Manager can still provide shell access 
  #     SecurityGroupEgress:
  #     # The SSM Agent connects to Session Manager over TCP 443
  #     - Description: allow outbound HTTPS to the VPC
  #       CidrIp: !Ref pCidr 
  #       FromPort: 443
  #       ToPort: 443
  #       IpProtocol: tcp
  # rSecurityGroupVpcEndpoint:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: SG for VPC Endpoints
  #     VpcId: !Ref rVpc
  #     SecurityGroupIngress:
  #     # The SSM Agent connects to Session Manager over TCP 443
  #     - Description: allow inbound HTTPS from the EC2 instance
  #       SourceSecurityGroupId: !Ref rSecurityGroupEc2Instance
  #       FromPort: 443
  #       ToPort: 443
  #       IpProtocol: tcp
  #     SecurityGroupEgress:
  #     # The SSM Agent connects to Session Manager over TCP 443
  #     - Description: allow outbound HTTPS to the VPC
  #       CidrIp: !Ref pCidr 
  #       FromPort: 443
  #       ToPort: 443
  #       IpProtocol: tcp
  # rPrivateSubnetRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref rPrivateRouteTable
  #     SubnetId: !Ref rPrivateSubnet